CREATE DATABASE INTER_NET;
GO
USE INTER_NET;
GO
-- Tabela CONTRATO_CLIENTE
CREATE TABLE CONTRATO_CLIENTE (
    ID_CONTRATO INT IDENTITY(1,1) PRIMARY KEY,
    NOME_CLIENTE VARCHAR(50) NOT NULL,
    ENDERECO_CLIENTE VARCHAR(100) NOT NULL,
    TELEFONE_CLIENTE VARCHAR(15) NOT NULL,
    DATA_INICIO_CONTRATO DATE NOT NULL,
    DATA_FIM_CONTRATO DATE NOT NULL,
    TIPO_CONTRATO VARCHAR(20) NOT NULL CHECK (TIPO_CONTRATO IN ('Mensal', 'Anual', 'Bienal'))
);

--Dados para tabela CONTRATO_CLIENTE
INSERT INTO CONTRATO_CLIENTE (NOME_CLIENTE, ENDERECO_CLIENTE, TELEFONE_CLIENTE, DATA_INICIO_CONTRATO, DATA_FIM_CONTRATO, TIPO_CONTRATO)
VALUES 
('João Silva', 'Rua das Flores, 123', '(11) 9999-8888', '2022-01-01', '2022-12-31', 'Anual'),
('Maria Santos', 'Av. Paulista, 456', '(11) 9876-5432', '2022-03-15', '2022-04-15', 'Mensal'),
('Pedro Almeida', 'Rua dos Pássaros, 789', '(11) 7777-6666', '2022-02-01', '2024-01-31', 'Bienal'),
('Ana Souza', 'Av. das Palmeiras, 1010', '(11) 5555-4444', '2022-05-01', '2022-06-01', 'Mensal'),
('Lucas Oliveira', 'Rua do Sol, 999', '(11) 2222-3333', '2022-06-01', '2022-12-31', 'Anual'),
('Fernanda Costa', 'Av. das Flores, 111', '(11) 4444-5555', '2022-09-01', '2022-10-01', 'Mensal'),
('Rafael Santos', 'Rua das Árvores, 222', '(11) 8888-9999', '2022-07-01', '2023-06-30', 'Anual'),
('Juliana Rodrigues', 'Av. dos Girassóis, 333', '(11) 3333-2222', '2022-10-01', '2024-09-30', 'Bienal'),
('Marcelo Silva', 'Rua das Pedras, 444', '(11) 6666-7777', '2022-04-01', '2022-12-31', 'Anual'),
('Carla Souza', 'Av. das Águas, 555', '(11) 1111-2222', '2022-01-01', '2023-01-01', 'Anual');


-- Tabela O.S_SERVIÇO
CREATE TABLE O_S_SERVIÇO (
    ID_SERVICO INT IDENTITY(100,1) PRIMARY KEY,
    ID_CONTRATO INT NOT NULL,
    DESCRICAO_SERVICO VARCHAR(200) NOT NULL,
    DATA_ABERTURA DATE NOT NULL DEFAULT GETDATE(),
    DATA_FECHAMENTO DATE,
    VALOR_SERVICO DECIMAL(10, 2) NOT NULL CHECK (VALOR_SERVICO >= 0),
    CONSTRAINT FK_ID_CONTRATO FOREIGN KEY (ID_CONTRATO) REFERENCES CONTRATO_CLIENTE(ID_CONTRATO)
);

INSERT INTO O_S_SERVIÇO (ID_CONTRATO, DESCRICAO_SERVICO, DATA_FECHAMENTO, VALOR_SERVICO)
VALUES 
(1, 'Manutenção preventiva na rede de fibra óptica', '2022-01-10', 250.00),
(2, 'Substituição de modem defeituoso', '2022-03-20', 50.00),
(3, 'Manutenção preventiva na torre de transmissão', '2022-02-10', 350.00),
(4, 'Verificação de velocidade de internet abaixo do contratado', '2022-06-20', 0.00),
(5, 'Instalação de repetidor de sinal', NULL, 100.00),
(6, 'Verificação de queda de conexão', '2022-09-20', 0.00),
(7, 'Troca de antena externa danificada', '2023-01-15', 180.00),
(8, 'Manutenção preventiva na central de distribuição', NULL, 450.00),
(9, 'Verificação de falha de DNS', '2024-06-10', 0.00),
(10, 'Configuração de rede Wi-Fi em novos dispositivos', NULL, 75.00);

GO


--Inclusão:
CREATE OR ALTER PROCEDURE SP_I_CONTRATO_CLIENTE
    @NOME_CLIENTE VARCHAR(50),
    @ENDERECO_CLIENTE VARCHAR(100),
    @TELEFONE_CLIENTE VARCHAR(15),
    @DATA_INICIO_CONTRATO DATE,
    @DATA_FIM_CONTRATO DATE,
    @TIPO_CONTRATO VARCHAR(20),
    @ID_CONTRATO INT = 0 OUT --PARÂMETRO DE SAÍDA
AS
    SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS

    --VERIFICANDO SE O TIPO DE CONTRATO É VÁLIDO
    IF NOT (@TIPO_CONTRATO IN ('Mensal', 'Anual', 'Bienal'))
    BEGIN
        RAISERROR('O tipo de contrato informado não é válido!', 15, 1)
        RETURN
    END

    INSERT INTO CONTRATO_CLIENTE
        (NOME_CLIENTE, ENDERECO_CLIENTE, TELEFONE_CLIENTE, DATA_INICIO_CONTRATO, DATA_FIM_CONTRATO, TIPO_CONTRATO)
    VALUES
        (@NOME_CLIENTE, @ENDERECO_CLIENTE, @TELEFONE_CLIENTE, @DATA_INICIO_CONTRATO, @DATA_FIM_CONTRATO, @TIPO_CONTRATO)

    SET @ID_CONTRATO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL */
    PRINT @ID_CONTRATO
    RETURN @ID_CONTRATO
GO


--Alteração:
CREATE OR ALTER PROCEDURE SP_ALTERAR_CLIENTE
    @ID INT,
    @NOME VARCHAR(50),
    @SOBRENOME VARCHAR(50),
    @EMAIL VARCHAR(50),
    @TELEFONE VARCHAR(15),
    @ENDERECO VARCHAR(100)
AS
BEGIN
    -- Verifica se o cliente existe
    IF NOT EXISTS (SELECT * FROM CONTRATO_CLIENTE WHERE ID = @ID)
    BEGIN
        RAISERROR('Não foi possível efetuar a alteração. Cliente não encontrado.', 16, 1)
        RETURN
    END

    -- Verifica se os dados informados são válidos
    IF LEN(LTRIM(RTRIM(@NOME))) = 0 OR LEN(LTRIM(RTRIM(@SOBRENOME))) = 0
    BEGIN
        RAISERROR('O nome e sobrenome são obrigatórios.', 16, 1)
        RETURN
    END

    IF LEN(LTRIM(RTRIM(@EMAIL))) = 0 AND LEN(LTRIM(RTRIM(@TELEFONE))) = 0
    BEGIN
        RAISERROR('O email ou telefone devem ser informados.', 16, 1)
        RETURN
    END
	
    -- Atualiza os dados do cliente
    UPDATE CONTRATO_CLIENTE
    SET NOME = @NOME,
        SOBRENOME = @SOBRENOME,
        EMAIL = @EMAIL,
        TELEFONE = @TELEFONE,
        ENDERECO = @ENDERECO
    WHERE ID = @ID
    
    -- Confirma a transação
    COMMIT TRAN
END

GO
--Exclusão:
CREATE OR ALTER PROCEDURE SP_D_CONTRATO_CLIENTE
@ID_CONTRATO INT
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_CONTRATO INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_CONTRATO = COUNT(ID_CONTRATO)
FROM CONTRATO_CLIENTE
WHERE ID_CONTRATO = @ID_CONTRATO
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE O CONTRATO EXISTE NO BD)
IF @NR_CONTRATO = 0
BEGIN
  RAISERROR('Não é possível efetuar a exclusão: O contrato informado não existe!',15,1)
  RETURN
END

--FAZENDO A EXCLUSÃO
DELETE FROM CONTRATO_CLIENTE WHERE ID_CONTRATO = @ID_CONTRATO

GO
--Consulta
CREATE OR ALTER PROCEDURE SP_S_CONTRATO_CLIENTE
( @FILTRO VARCHAR(100)='')
AS
IF (LEN(@FILTRO)=0)
BEGIN
SELECT
    CON_IN_CODIGO AS 'Código',
    CLI_CH_CPF AS 'CPF',
    CLI_ST_NOME AS 'Nome',
    CON_DT_INICIO AS 'Início',
    CON_DT_TERMINO AS 'Término',
    CON_RE_VALOR AS 'Valor',
    CON_ST_DESCRICAO AS 'Descrição'
FROM
    CONTRATO_CLIENTE CC
    INNER JOIN CLIENTE C ON CC.ID_CLIENTE = C.ID_CLIENTE
ORDER BY
    CLI_ST_NOME
RETURN
END
ELSE
BEGIN
SELECT
    CON_IN_CODIGO AS 'Código',
    CLI_CH_CPF AS 'CPF',
    CLI_ST_NOME AS 'Nome',
    CON_DT_INICIO AS 'Início',
    CON_DT_TERMINO AS 'Término',
    CON_RE_VALOR AS 'Valor',
    CON_ST_DESCRICAO AS 'Descrição'
FROM
    CONTRATO_CLIENTE CC
    INNER JOIN CLIENTE C ON CC.ID_CLIENTE = C.ID_CLIENTE
WHERE
    CLI_CH_CPF LIKE '%'+@FILTRO+'%' OR
    CLI_ST_NOME LIKE '%'+@FILTRO+'%' OR
    CON_ST_DESCRICAO LIKE '%'+@FILTRO+'%'
ORDER BY
    CLI_ST_NOME
END
GO


--Tabela 2

--Inclusão:
CREATE OR ALTER PROCEDURE SP_I_OS_SERVICO
    @ID_ORDEM INT,
    @ID_SERVICO INT,
    @DT_AGENDAMENTO DATE,
    @DT_EXECUCAO DATE,
    @CODIGOGERADO INT=0 OUT --PARÂMETRO DE SAÍDA
AS
    SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS

    DECLARE @NR_OS INT 

    --EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
    SELECT @NR_OS = COUNT(ID_ORDEM)
    FROM O_S_SERVICO
    WHERE ID_ORDEM = @ID_ORDEM

    --COMPARANDO SE O TOTAL É MAIOR QUE ZERO (OU SEJA, JÁ EXISTE NO BD)
    IF @NR_OS > 0
    BEGIN
        RAISERROR('A ordem de serviço informada já existe!',15,1)
        RETURN
    END

    --COMPARANDO SE AS DATAS SÃO VÁLIDAS
    IF (@DT_AGENDAMENTO > @DT_EXECUCAO)
    BEGIN
        RAISERROR('A data de agendamento não pode ser posterior à data de execução!',15,1)
        RETURN
    END

    INSERT INTO O_S_SERVICO (ID_ORDEM, ID_SERVICO, DT_AGENDAMENTO, DT_EXECUCAO) 
    VALUES (@ID_ORDEM, @ID_SERVICO, @DT_AGENDAMENTO, @DT_EXECUCAO)

    SET @CODIGOGERADO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL */
    PRINT @CODIGOGERADO 
    RETURN @CODIGOGERADO
GO

--Alteração:
CREATE OR ALTER PROCEDURE SP_U_CONTRATO_CLIENTE
@ID_CONTRATO INT,
@NOME_CLIENTE VARCHAR(50),
@ENDERECO_CLIENTE VARCHAR(100),
@TELEFONE_CLIENTE VARCHAR(15),
@DATA_INICIO_CONTRATO DATE,
@DATA_FIM_CONTRATO DATE,
@TIPO_CONTRATO VARCHAR(20)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS

-- VERIFICANDO SE O REGISTRO EXISTE NA TABELA
IF NOT EXISTS (SELECT 1 FROM CONTRATO_CLIENTE WHERE ID_CONTRATO = @ID_CONTRATO)
BEGIN
   RAISERROR('Não é possível efetuar a alteração: O registro informado não existe!',15,1)
   RETURN
END

-- VERIFICANDO SE OS CAMPOS OBRIGATÓRIOS ESTÃO PREENCHIDOS
IF LEN(TRIM(@NOME_CLIENTE)) = 0 OR LEN(TRIM(@ENDERECO_CLIENTE)) = 0 OR LEN(TRIM(@TELEFONE_CLIENTE)) = 0
BEGIN
   RAISERROR('O nome, endereço e telefone do cliente são obrigatórios!',15,1)
   RETURN
END

-- VERIFICANDO SE A DATA DE INÍCIO DO CONTRATO É ANTERIOR À DATA FIM DO CONTRATO
IF @DATA_INICIO_CONTRATO > @DATA_FIM_CONTRATO
BEGIN
   RAISERROR('A data de início do contrato não pode ser posterior à data fim do contrato!',15,1)
   RETURN
END

-- VERIFICANDO SE O TIPO DE CONTRATO É VÁLIDO
IF @TIPO_CONTRATO NOT IN ('Mensal', 'Anual', 'Bienal')
BEGIN
   RAISERROR('O tipo de contrato informado não é válido!',15,1)
   RETURN
END

-- REALIZANDO A ALTERAÇÃO DO REGISTRO
UPDATE CONTRATO_CLIENTE
SET NOME_CLIENTE = @NOME_CLIENTE, 
    ENDERECO_CLIENTE = @ENDERECO_CLIENTE, 
    TELEFONE_CLIENTE = @TELEFONE_CLIENTE, 
    DATA_INICIO_CONTRATO = @DATA_INICIO_CONTRATO, 
    DATA_FIM_CONTRATO = @DATA_FIM_CONTRATO,
    TIPO_CONTRATO = @TIPO_CONTRATO
WHERE ID_CONTRATO = @ID_CONTRATO

RETURN 
GO

--delete
CREATE OR ALTER PROCEDURE SP_D_OS_SERVICO
@ID_ORDEM INT
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_OS INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_OS = COUNT(ID_ORDEM)
FROM O_S_SERVICO
WHERE ID_ORDEM = @ID_ORDEM
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A ORDEM DE SERVIÇO EXISTE NO BD)
IF @NR_OS = 0
BEGIN
  RAISERROR('Não é possível efetuar a exclusão: A ordem de serviço informada não existe!',15,1)
  RETURN
END

DELETE FROM O_S_SERVICO WHERE ID_ORDEM = @ID_ORDEM

GO
--consulta registro
CREATE OR ALTER PROCEDURE SP_S_CONTRATO_OS_SERVICO
( 
    @FILTRO VARCHAR(100)=''
)
AS
IF (LEN(@FILTRO)=0)
BEGIN
    SELECT
        CS_CLI_CH_NOME AS 'Cliente',
        CC_CON_CH_CODIGO AS 'Contrato',
        OS_ID_ORDEM AS 'Ordem de Serviço',
        OS_SER_CH_NOME AS 'Serviço',
        CONVERT(CHAR(10), OS_DT_AGENDAMENTO, 103) AS 'Data de Agendamento',
        CONVERT(CHAR(10), OS_DT_EXECUCAO, 103) AS 'Data de Execução',
        OS_OS_CH_STATUS AS 'Status'
    FROM
        O_S_SERVICO AS OS
        INNER JOIN CONTRATO_CLIENTE AS CC ON OS_ID_CONTRATO = CC_ID_CONTRATO
        INNER JOIN CLIENTE_SERVICO AS CS ON CS_ID_SERVICO = CC_ID_SERVICO
        INNER JOIN SERVICO AS S ON OS_ID_SERVICO = CC_ID_SERVICO
    ORDER BY
        CS_CLI_CH_NOME,
        CC_CON_CH_CODIGO,
        OS_ID_ORDEM,
        OS_SER_CH_NOME
    RETURN
END
ELSE
BEGIN
    SELECT
        CS_CLI_CH_NOME AS 'Cliente',
        CC_CON_CH_CODIGO AS 'Contrato',
        OS_ID_ORDEM AS 'Ordem de Serviço',
        OS_SER_CH_NOME AS 'Serviço',
        CONVERT(CHAR(10), OS_DT_AGENDAMENTO, 103) AS 'Data de Agendamento',
        CONVERT(CHAR(10), OS_DT_EXECUCAO, 103) AS 'Data de Execução',
        OS_OS_CH_STATUS AS 'Status'
    FROM
        O_S_SERVICO AS OS
        INNER JOIN CONTRATO_CLIENTE AS CC ON OS_ID_CONTRATO = CC_ID_CONTRATO
        INNER JOIN CLIENTE_SERVICO AS CS ON CS_ID_SERVICO = CC_ID_SERVICO
        INNER JOIN SERVICO AS S ON OS_ID_SERVICO = CC_ID_SERVICO
    WHERE
        CS_CLI_CH_NOME LIKE '%'+@FILTRO+'%' OR
        CC_CON_CH_CODIGO LIKE '%'+@FILTRO+'%' OR
        OS_ID_ORDEM LIKE '%'+@FILTRO+'%' OR
        OS_SER_CH_NOME LIKE '%'+@FILTRO+'%'
    ORDER BY
        CS_CLI_CH_NOME,
        CC_CON_CH_CODIGO,
        OS_ID_ORDEM,
        OS_SER_CH_NOME
END
GO
